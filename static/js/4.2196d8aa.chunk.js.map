{"version":3,"sources":["components/SpecTable/SpecTable.tsx","helpers/filters.ts","components/ProductCard/ProductCard.tsx","components/ProductsList/ProductsList.tsx","routes/NotFoundPage/NotFoundPage.tsx","components/ProductsList/index.js","components/Search/Search.tsx","components/Pagination/Pagination.tsx","helpers/pagination.ts","routes/ProductPage/sorters.ts","routes/ProductPage/ProductPage.tsx"],"names":["SpecTable","specifications","style","fontSize","fontWeight","specCount","className","Object","entries","map","i","key","value","Array","isArray","join","sortProducts","products","activeFilter","sort","a","b","year","name","localeCompare","price","filterProducts","query","filter","toLowerCase","includes","getHotPriceProducts","productsToSort","aDiff","fullPrice","slice","getBrandNewProducts","getRandomProducts","numProducts","length","randomProducts","randomProduct","Math","floor","random","push","ProductCard","memo","product","image","screen","capacity","ram","itemId","category","useCart","addCartItem","isInCart","cartItems","some","item","id","specsToShow","Screen","Capacity","RAM","to","src","alt","onClick","width","height","isActive","productId","size","ProductsList","NotFoundPage","title","home","Search","queredProducts","productsNum","Pagination","total","sortedProducts","useSearchParams","searchParams","setSearchParams","perPage","Number","get","page","handlePageChange","set","scrollToTop","numberOfPages","ceil","visibleProducts","currentPage","min","getItemsToShowIndex","useEffect","isDisabled","svg","leftArrow","from","v","pageNumber","type","classNames","rightArrow","perPageOptions","all","sortOptions","age","ProductPage","useProducts","error","activeSorter","categoryName","capitalizeString","useMemo","replace","label","options"],"mappings":"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","file":"static/js/4.2196d8aa.chunk.js","sourcesContent":["import { Specifications } from '@typings/specifications';\nimport './SpecTable.scss';\n\ntype SpecTableProps = {\n  specifications: Specifications;\n  style?: { fontSize: number; fontWeight: number };\n  specCount?: number;\n};\n\nexport const SpecTable = ({\n  specifications,\n  style = { fontSize: 12, fontWeight: 600 },\n  specCount,\n}: SpecTableProps) => (\n  <table className=\"specification-table\">\n    <tbody style={style} className=\"specification-table__body\">\n      {Object.entries(specifications).map(([key, value], i) => {\n        if (specCount && specCount <= i) {\n          return null;\n        }\n\n        return (\n          <tr key={key} className=\"specification-table__row\">\n            <td className=\"specification-table__details\">{key}</td>\n            <td>{Array.isArray(value) ? value.join(', ') : value}</td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n);\n","import { Product } from '@typings/product';\n\nexport const sortProducts = (products: Product[], activeFilter: string) => {\n  switch (activeFilter) {\n    case 'age':\n      return products.sort((a, b) => b.year - a.year);\n    case 'name':\n      return products.sort((a, b) => a.name.localeCompare(b.name));\n    case 'price':\n      return products.sort((a, b) => a.price - b.price);\n    default:\n      return products;\n  }\n};\n\nexport const filterProducts = (products: Product[], query: string) => {\n  return products.filter(({ name }) => name.toLowerCase().includes(query.toLowerCase()));\n};\n\nexport const getHotPriceProducts = (productsToSort: Product[]) => productsToSort\n  .sort((a, b) => {\n    const aDiff = a.fullPrice - a.price;\n    const bDiff = b.fullPrice - b.price;\n\n    return bDiff - aDiff;\n  })\n  .slice(0, 16);\n\nexport const getBrandNewProducts = (productsToSort: Product[]) => productsToSort.sort((a, b) => b.year - a.year).slice(0, 16);\n\nexport const getRandomProducts = (products: Product[]): Product[] => {\n  const numProducts = products.length;\n  const randomProducts: Product[] = [];\n\n  if (numProducts <= 16) {\n    return products;\n  }\n\n  while (randomProducts.length < 16) {\n    const randomIndex = Math.floor(Math.random() * numProducts);\n    const randomProduct = products[randomIndex];\n\n    if (!randomProducts.includes(randomProduct)) {\n      randomProducts.push(randomProduct);\n    }\n  }\n\n  return randomProducts;\n};\n","import { memo } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { Product } from '@typings/product';\nimport { PrimaryButton, FavButton } from '@components/UI';\nimport { SpecTable } from '@components/SpecTable/SpecTable';\nimport { useCart } from '@contexts/cartContext';\nimport './ProductCard.scss';\n\ntype ProductCardProps = {\n  product: Product;\n};\n\nexport const ProductCard = memo(({ product }: ProductCardProps) => {\n  const {\n    image,\n    name,\n    price,\n    screen,\n    capacity,\n    ram,\n    fullPrice,\n    itemId,\n    category,\n  } = product;\n  const { addCartItem, cartItems } = useCart();\n\n  const isInCart = cartItems.some(item => item.id === itemId);\n\n  const specsToShow = {\n    Screen: screen,\n    Capacity: capacity,\n    RAM: ram,\n  };\n\n  return (\n    <div className=\"product-card\">\n      <Link to={`/${category}/${itemId}`} className=\"product-card__link\">\n        <img className=\"product-card__image\" src={image} alt={name} />\n\n        <p className=\"product-card__name\">{name}</p>\n      </Link>\n      <p className=\"product-card__price\">\n        {`$${price}`}\n        {fullPrice - price > 0 && (\n          <span className=\"product-card__price--strike\">{`$${fullPrice}`}</span>\n        )}\n      </p>\n\n      <div className=\"product-card__spec\">\n        <SpecTable specifications={specsToShow} />\n      </div>\n\n      <div className=\"product-card__controls\">\n        <PrimaryButton\n          onClick={() => addCartItem(product)}\n          width={176}\n          height={40}\n          isActive={isInCart}\n        >\n          Add to cart\n        </PrimaryButton>\n\n        <FavButton product={product} productId={itemId} size={40} />\n      </div>\n    </div>\n  );\n});\n","import { Product } from '@typings/product';\nimport { ProductCard } from '@components/ProductCard';\nimport './ProductsList.scss';\n\ntype ProductsListProps = {\n  products: Product[] ;\n};\n\nexport const ProductsList = ({ products }: ProductsListProps) => {\n  return (\n    <>\n      <ul className=\"products-list\" data-cy=\"productList\">\n        {products.map(product => (\n          <li key={product.itemId}>\n            <ProductCard product={product} />\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","import { Link } from 'react-router-dom';\n\nimport home from '@assets/svg/home.svg';\nimport './NotFoundPage.scss';\n\ntype NotFoundPageProps = {\n  title: string;\n};\n\nconst NotFoundPage = ({ title }: NotFoundPageProps) => (\n  <section className=\"not-found\">\n    <h1 className=\"not-found__title\">{title}</h1>\n    <Link className=\"not-found__link\" to=\"/home\">\n      <img className=\"not-found__image\" src={home} alt=\"Go to home page\" />\n      Go back to home page\n    </Link>\n  </section>\n);\n\nexport default NotFoundPage;\n","export { ProductsList } from './ProductsList';\n","import { filterProducts } from '@helpers/filters';\nimport { Product } from '@typings/product';\nimport { ProductsList } from '@components/ProductsList';\nimport './Search.scss';\n\ntype SearchProps = {\n  query: string;\n  products: Product[];\n};\n\nexport const Search = ({ query, products }: SearchProps) => {\n  const queredProducts = filterProducts(products, query);\n  const productsNum = queredProducts.length;\n\n  return (\n    <section className=\"search-results\">\n      {productsNum > 0 ? (\n        <>\n          <p className=\"search-results__count\">{`${productsNum} results`}</p>\n          <ProductsList products={queredProducts} />\n        </>\n      ) : (\n        <h1 className=\"search-results__title\">No Search Results</h1>\n      )}\n    </section>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport { useEffect } from 'react';\nimport classNames from 'classnames';\n\nimport { IconButton } from '@components/UI';\nimport { ProductsList } from '@components/ProductsList';\nimport leftArrow from '@assets/svg/l_arrow.svg';\nimport rightArrow from '@assets/svg/r_arrow.svg';\nimport { getItemsToShowIndex } from '@helpers/pagination';\nimport { scrollToTop } from '@helpers/dom';\nimport { Product } from '@typings/product';\nimport './Pagination.scss';\n\ntype PaginationProps = {\n  total: number;\n  sortedProducts: Product[];\n};\n\nexport const Pagination = ({ total, sortedProducts }: PaginationProps) => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const perPage = Number(searchParams.get('perPage')) || 'all';\n  const page = Number(searchParams.get('page')) || 1;\n\n  const handlePageChange = (value: number) => {\n    if (perPage !== 'all') {\n      searchParams.set('page', `${value}`);\n      setSearchParams(searchParams);\n      scrollToTop();\n    }\n  };\n\n  const numberOfPages\n    = perPage === 'all' ? 1 : Math.ceil(total / Number(perPage));\n\n  const visibleProducts = sortedProducts.slice(\n    ...getItemsToShowIndex(perPage, page, total),\n  );\n\n  useEffect(() => {\n    handlePageChange(1);\n  }, [perPage]);\n\n  return (\n    <>\n      <ProductsList products={visibleProducts} />\n      {numberOfPages > 1 && (\n        <ul className=\"pagination\" data-cy=\"pagination\">\n          <li>\n            <IconButton\n              onClick={() => handlePageChange(page - 1)}\n              isDisabled={page === 1}\n              svg={leftArrow}\n              data-cy=\"paginationLeft\"\n              alt=\"Pagination left button\"\n            />\n          </li>\n\n          <li>\n            <ul className=\"pagination__pages-container\">\n              {Array.from({ length: 5 }, (v, i) => i + page - 2).map(\n                pageNumber => (pageNumber <= 0 || pageNumber > numberOfPages ? null : (\n                  <li key={pageNumber} className=\"pagination__page\">\n                    <button\n                      type=\"button\"\n                      className={classNames('pagination__button', {\n                        'pagination__button--active': pageNumber === page,\n                      })}\n                      onClick={() => handlePageChange(pageNumber)}\n                    >\n                      {pageNumber}\n                    </button>\n                  </li>\n                )),\n              )}\n            </ul>\n          </li>\n\n          <li>\n            <IconButton\n              onClick={() => handlePageChange(page + 1)}\n              isDisabled={page === numberOfPages}\n              svg={rightArrow}\n              data-cy=\"paginationRight\"\n              alt=\"Pagination right button\"\n            />\n          </li>\n        </ul>\n      )}\n    </>\n  );\n};\n","export function getItemsToShowIndex(\n  perPage: string | number,\n  currentPage: number,\n  total: number,\n) {\n  if (typeof perPage === 'string') {\n    return [0, total];\n  }\n\n  const itemsTo = Math.min(perPage * currentPage, total);\n  const itemsFrom = perPage * (currentPage - 1);\n\n  return [itemsFrom, itemsTo];\n}\n","export const perPageOptions: { [key: string]: string } = {\n  all: 'all',\n  4: '4',\n  8: '8',\n  16: '16',\n};\n\nexport const sortOptions: { [key: string]: string } = {\n  age: 'Newest',\n  name: 'Alphabetically',\n  price: 'Cheapest',\n};\n","import { Navigate, useSearchParams } from 'react-router-dom';\nimport { useEffect, useMemo } from 'react';\n\nimport { Breadcrumbs, Select } from '@components/UI';\nimport { Pagination } from '@components/Pagination/Pagination';\nimport { Search } from '@components/Search/Search';\nimport { ProductsMap, useProducts } from '@contexts/productsContext';\nimport { capitalizeString } from '@helpers/stringOperations';\nimport { sortProducts } from '@helpers/filters';\nimport { scrollToTop } from '@helpers/dom';\nimport NotFoundPage from '@routes/NotFoundPage/NotFoundPage';\nimport { sortOptions, perPageOptions } from './sorters';\nimport './ProductPage.scss';\n\nconst ProductPage = ({ category }: { category: string }) => {\n  const [searchParams] = useSearchParams();\n  const { products, error } = useProducts();\n\n  const activeSorter = searchParams.get('sort') || 'age';\n  const query = searchParams.get('query') || '';\n\n  const type = category as keyof ProductsMap;\n  const categoryName = capitalizeString(type);\n  const productsNum = products[type].length;\n\n  const sortedProducts = useMemo(\n    () => sortProducts(products[type], activeSorter),\n    [activeSorter],\n  );\n\n  useEffect(() => {\n    scrollToTop();\n  }, []);\n\n  if (error) {\n    return <NotFoundPage title=\"Something went wrong\" />;\n  }\n\n  if (query) {\n    return <Search query={query} products={sortedProducts} />;\n  }\n\n  return (\n    <div className=\"products-page\">\n      {!searchParams.get('sort') && (\n        <Navigate to=\"?sort=age&perPage=all\" replace />\n      )}\n\n      <Breadcrumbs />\n\n      {productsNum === 0 ? (\n        <h1 className=\"products-page__title\">{`${categoryName} not found`}</h1>\n      ) : (\n        <>\n          <h1 className=\"products-page__title\">{categoryName}</h1>\n          <p className=\"products-page__count\">{`${productsNum} models`}</p>\n          <div className=\"products-page__selectors\">\n            <Select\n              label=\"Sort by\"\n              width={176}\n              options={sortOptions}\n              name=\"sort\"\n            />\n\n            <Select\n              label=\"Items on page\"\n              width={128}\n              name=\"perPage\"\n              options={perPageOptions}\n            />\n          </div>\n          <section className=\"products-page__products-list\">\n            <Pagination sortedProducts={sortedProducts} total={productsNum} />\n          </section>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ProductPage;\n"],"sourceRoot":""}